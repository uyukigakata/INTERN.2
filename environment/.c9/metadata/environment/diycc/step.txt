{"changed":true,"filter":false,"title":"step.txt","tooltip":"/diycc/step.txt","value":"\n技術インターンシップ用\nCコンパイラサブセットの自作解説\n\nstep000:\n    目標：\n        レキサの作成\n    実行方法：\n    % python3 lex.py \n\n    結果\n    LexToken(NUMBER,'100',2,5)\n\n    数字 100 をトークン化する例\n\n    ポイント\n        ply の token のルール\n        ・下記にトークンの種類を列挙\n        tokens = (\n            'NUMBER',\n        )\n\n        t_NUMBER : トークンの種類\n        t_NUMBER = r'\\d+'\n        正規表現で トークンのパターンを記述する\n\n        ## space と \\t は igonore(無視)\n        t_ignore = ' \\t'\n\n        コマンドを動かすと、トークンに分割して結果を表示する\n\n        LexToken(NUMBER,'100',2,5)\n                  NUMBERというトークン\n                  100 という文字列\n\nstep001:\n    目標：\n        return 49; をトークン化\n    実行方法\n    % python3 lex.py \n\n    結果\n    LexToken(RETURN,'return',2,5)\n    LexToken(NUMBER,'49',2,12)\n    LexToken(SEMI,';',2,14)\n\n    ポイント\n        retrun\n        49\n        ;\n    これらに分解する\n\nstep002:\n    目標：\n        シンプルな AST作成\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    ['return', '3', ';']\n\n    ポイント\n    LexToken(RETURN,'return',2,5)\n    LexToken(NUMBER,'49',2,12)\n    LexToken(SEMI,';',2,14)\n\n    というトークンを eBNF 記法に従って解析する\n\nstep003:\n    目標：\n        実行形式の作成\n        codegen で out.s を作成\n        gcc out.s で a.out を作成\n        実行すると a.out の プロセス終了値が返却される\n        echo $? で値が取れる。注意:0~255の範囲のみ  \n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    ['return', '8', ';']\n    8\n\n    ポイント\n        上記AST を愚直に out.s に出力する\n\n        どのような .s を出さないといけないかは下記の gcc を参考にする。\n        gcc  -fno-asynchronous-unwind-tables  -S sample.c \n\n\n        大事なキーワード\n        \t.text       プログラム領域(text)を示す。先頭につておく\n                        このほかにも .data 領域 .bss 領域などがある\n            \n        =============================\n            .globl\tmain\n            .type\tmain, @function\n        main:\n        =============================\n                        main 関数のシンボルが global\n                        関数タイプ\n                        main: 以下に関数のアセンブリソースが列挙されるを示すラベル\n\n\n        =============================\n            endbr64         ←関数の頭にはおいておくおまじない(発展的話題なので気になったら聞こう)\n            pushq\t%rbp    ←ベースポインタの記憶(関数ののスタックの基準となるアドレスを覚えている)\n            movq\t%rsp, %rbp  ← スタックポインタをベースポインタへ代入\n            movl\t$3, %eax    ← return 3 をするときの 3 を eax レジスタにいれる\n            popq\t%rbp        ← スタックポイントを戻す\n            ret                 ← main関数から復帰する\n            .size\tmain, .-main    ← main 関数のサイズを定義する\n        =============================\n\n        これらを out.s として生成すれば\n        gcc out.s と叩くと、アセンブリソースを解釈して a.out が作られる\n        ./a.out を動かすと main 関数の戻り値がOSに返却される。\n        echo $? で値を見ることができる。0~255の範囲しかNG\n\n        今回は movl\t$3, %eax の $3 部分が return xxx; の xxx の数字になればOK;\n\n        参考サイト：\n            x86-64プロセッサのスタックを理解する\n                https://qiita.com/tobira-code/items/75d3034aed8bb9828981\n\nstep004:\n    目標：\n        足し算引き算の実装\n        return 4+3; のような形式が解釈可能になる\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    ['return', ['-', ['-', ['NUM', '2'], ['NUM', '1']], ['NUM', '1']], ';']\n\nstep005:\n    目標：\n        足し算引き算の実装\n        return 4+3; のような形式が解釈可能になる\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    ['return', ['-', ['-', ['NUM', '3'], ['NUM', '1']], ['NUM', '1']], ';']\n    1\n\n    ポイント\n        return 4+3;\n        又は\n        return 3-1-1;\n        このような処理をCPUで行う。\n\n        これは\n        3,1,-,1,- のような後置記法に変換を行って\n\n        push 3\n        push 1\n        sub    # pop 1, pop 3 , 3 - 1, push 2\n        push 1\n        sub    # pop 1, pop 2 , 2 - 1, push 1\n\n        というスタックタイプの演算器に放り込む事を考える。\n\n        このスタックタイプの演算器は 下記のように置換することができる\n        push 3\n\n        push 1\n\n        pop %rdi\n        pop %rax\n        sub %rdi,%rax\n        push %rax\n\n        結果的に計算結果が スタックに積まれることになるので\n        movl\t$3, %eax    ← return 3 をするときの 3 を eax レジスタにいれる\n        上記を下記に書き換えることで、実装できる\n        pop     %eax\n\n\nstep006:\n    目標：\n        掛算の実装\n        return 4+3; のような形式が解釈可能になる\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]], ';']\n    9\n\n    ポイント 掛算を付け加える\n        下記で演算子の順序を決めるというチート技で記載する\n        precedence = (\n            ('left','OPTASU','OPHIKU'),\n            ('left','OPKAKE'),\n        )\n    ・第一引数で左結合演算か、右結合演算か指定する\n    ・同じ優先順位レベルの場合はひとつのタプルにまとめて書ける (上記の例の場合 OPTASU と OPHIKU)\n    ・タプルの下のトークンほど優先順位が高い\n\nstep007:\n    目標：\n        main関数のパースと構文木の作成\n        int main(){\n            return 3+2*3;\n        }\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    [['func', 'int', 'main', ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]], ';']]]\n\n    ポイント\n        いままでは main を固定だと思っていたけど、それを C言語ソースから取れるようにする。\n        その為に AST をつくり込む必要がある。\n\n        まず lexer に 一部のトークンを追加する\n        eBNF に 関数の構文を定義する\n\nstep008:\n    目標：\n        step007のasmソース生成\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [['func', 'int', 'main', ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]], ';']]]\n    ===codegen step1===\n    ['func', 'int', 'main', ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]], ';']]\n    ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]]\n    ===codegen step2===\n    funcname: main\n    9\n\n    ポイント\n        愚直でいいので いままでは main を固定だと思っていたけど、それを C言語ソースから取れるようにする。\n        codegen の中で\n        teigi1 = tree[0]\n        rettype  = teigi1[1]    #戻り値の型 int\n        funcname = teigi1[2]    #関数名 main\n        exp      = teigi1[3][1] #文\n        このように愚直にとって関数名にいれる。\n        無理にソースをスマートにしない。（今後もう少し複雑になるので、その時に考えよう）\n\n\nstep009:\n    目標：\n        変数宣言と構文木の作成\n        int main(){\n            int x;\n            int y;\n            return 3+2*3;\n        }\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    [['func', 'int', 'main', [\n        ['SENGEN', 'int', 'x'], \n        ['SENGEN', 'int', 'y'], \n        ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]]\n        ]]]]\n\n    ポイント\n        書きましょう\n\nstep010:\n    目標：\n        step009 のアセンブラ化 (step1)\n        但し x,y のローカル変数領域はまだ確保しない\n        ほぼ、今までの挙動に合わせたcodegenをするだけ(ASTは雑にパース)\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [['func', 'int', 'main', [['SENGEN', 'int', 'x'], ['SENGEN', 'int', 'y'], ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]]]]]]\n    ===codegen step1===\n    ['func', 'int', 'main', [['SENGEN', 'int', 'x'], ['SENGEN', 'int', 'y'], ['return', ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]]]]]\n    ['+', ['NUM', '3'], ['*', ['NUM', '2'], ['NUM', '3']]]\n    ===codegen step2===\n    funcname: main\n    9\n\n    ポイント\n        愚直でいいので。\n\n    lambda式\n        lambda 引数, 引数, ...: 式\n    filter() 関数\n        第一引数に関数、第二引数にリストなどのイテラブルオブジェクトを指定する。\n        イテラブルの要素に関数を適用し、結果がTrueと判定されたものを抽出する。\n        Python3 では filter() 関数は filter 型のイテレータを返す。\n        結果をリストにしたい場合は list() を使う。\n    使用例\n        list( filter( lambda item: item[0] != 'SENGEN' , teigi1[3] ) )\n        teigi1[3] のリストをイテレートして item に格納し、\n        item[0] が 'SENGEN' でないものだけ抽出しリストにして返す\n\nstep011:\n    目標：\n        step010 に namedtupleを導入する\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])]\n    ===codegen step1===\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])\n    [Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]\n    Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])\n    ===codegen step2===\n    funcname: main\n    9\n\n    ポイント\n        ASTの構造を変えよう。\n        流石に tree[0] とかやってるとわからなくなるので、少しだけ namedtupleを導入して少しわかりやすくする\n\n\n        namedtuple は、tuple の弱点である格納したデータに整数のインデックスでしかアクセスできない問題を解決する\n        tuple の拡張データ型と考えてもよい。\n        使用例\n        from collections import namedtuple\n        # Node というシンプルなデータ型を定義\n        #　　Node には label と items という 2つのフィールドがある\n        Node = namedtuple('Node',('label','items'))\n        # 以下のような感じで使う\n        n = Node(label='return',items=[p[2]])\n        n.label # ==> 'return'\n        n.items # ==> [p[2]]\n\n\nstep012:\n    目標：\n        ローカル変数の確保を実施する(asmコード生成部)\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])]\n    ===codegen step1===\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])\n    calcframesize :2\n    [Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]\n    Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])\n    ===codegen step2===\n    funcname: main\n    9\n\n    ポイント\n        変数の領域はスタック上に確保することになるため、サイズ分だけずらしましょう。\n        本当は sizeof(int) は 最近の環境だと 4byte だけれども、ここでは 8byte(64bit)とする。\n        理由は、この後出てくる関数呼び出しの実装時に 4byteだとアライメント調整が必要になるため。\n        8byte単位アライメント調整だとこの辺の実装が楽になるので、とりあえずは 8byte にしておこう。\n\n\nstep013:\n    目標：\n        ローカル変数への代入を扱えるようにする(構文木)\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = 20;\n            return 3+2*3;\n        }\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    [Node(label='func', items=\n        ['int', 'main',\n            [Node(label='SENGEN', items=\n                ['int', 'x']), Node(label='SENGEN', items=\n                    ['int', 'y']), Node(label='DAINYU', items=\n                        ['x', Node(label='NUM', items=\n                            ['10'])]), Node(label='DAINYU', items=\n                                ['y', Node(label='NUM', items=\n                                    ['20'])]), Node(label='return', items=\n                                        [Node(label='+', items=\n                                            [Node(label='NUM', items=['3']), Node(label='*', items=\n                                                [Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])\n                                                ])\n                                            ]\n                                        ])\n            ]\n        ])\n    \n    ]\n\nstep014:\n    目標：\n        ローカル変数への代入ができるようにする(asmコード生成部)\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])]\n    ===codegen step1===\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])\n    calcframesize :2\n    {'x': 16, 'y': 8}\n    [Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]\n    exp:\n    Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])\n    dainyu_list:\n    [Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]\n    ===codegen step2===\n    funcname: main\n    9\n\n    ポイント\n        愚直行う\n        x は -16オフセットの位置\n        y は -8 オフセットの位置\n        このようにして\n        -16(%rbp) -8(%rbp) などとすると、x や y　の領域になる。\n        これを使うことで変数へのアクセスができる。\n\n\nstep015:\n    目標：\n        ソース生成部のリファクタリング化\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])]\n    ===codegen step1===\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])\n    calcframesize :2\n    {'x': 16, 'y': 8}\n    ===codegen step2===\n    funcname: main\n    !!entering walk!!\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])]])\n    !!entering walk!!\n    Node(label='SENGEN', items=['int', 'x'])\n    !!entering walk!!\n    Node(label='SENGEN', items=['int', 'y'])\n    !!entering walk!!\n    Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n    !!entering walk!!\n    Node(label='NUM', items=['10'])\n    {'x': 16, 'y': 8}\n    !!entering walk!!\n    Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])\n    !!entering walk!!\n    Node(label='NUM', items=['20'])\n    {'x': 16, 'y': 8}\n    !!entering walk!!\n    Node(label='return', items=[Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])])\n    !!entering walk!!\n    Node(label='+', items=[Node(label='NUM', items=['3']), Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])])\n    !!entering walk!!\n    Node(label='NUM', items=['3'])\n    !!entering walk!!\n    Node(label='*', items=[Node(label='NUM', items=['2']), Node(label='NUM', items=['3'])])\n    !!entering walk!!\n    Node(label='NUM', items=['2'])\n    !!entering walk!!\n    Node(label='NUM', items=['3'])\n    9\n\n    ポイント\n        codegen 関数内で行っていたものを walk関数内に移動させよう\n        framecount ��� frameVarNameMap は global変数化しよう。\n        （愚直優先）\n        今後、本当だったら class化してインスタンス変数化してもいいが、いまはglobal。\n\nstep016:\n    目標：\n        ローカル変数への参照を扱えるようにする(構文木)\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = 20;\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    [Node(label='func', items=\n        ['int', 'main', \n            [Node(label='SENGEN', items=\n                ['int', 'x']), Node(label='SENGEN', items=\n                    ['int', 'y']), Node(label='DAINYU', items=\n                        ['x', Node(label='NUM', items=\n                            ['10'])]), Node(label='DAINYU', items=\n                                ['y', Node(label='NUM', items=\n                                    ['20'])]), Node(label='return', items=\n                                        [Node(label='+', items=\n                                            [Node(label='VAR', items=\n                                                ['x']), Node(label='VAR', items=\n                                                    ['y'\n                                                    ])\n                                            ])\n                                        ])\n            ]\n        ])\n    ]    \n\nstep017:\n    目標：\n        ローカル変数への参照を扱えるようにする(asmコード生成部)\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n    ===codegen step1===\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n    calcframesize :2\n    {'x': 16, 'y': 8}\n    ===codegen step2===\n    funcname: main\n    !!entering walk!!\n    Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n    !!entering walk!!\n    Node(label='SENGEN', items=['int', 'x'])\n    !!entering walk!!\n    Node(label='SENGEN', items=['int', 'y'])\n    !!entering walk!!\n    Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n    !!entering walk!!\n    Node(label='NUM', items=['10'])\n    {'x': 16, 'y': 8}\n    !!entering walk!!\n    Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])\n    !!entering walk!!\n    Node(label='NUM', items=['20'])\n    {'x': 16, 'y': 8}\n    !!entering walk!!\n    Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n    !!entering walk!!\n    Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n    !!entering walk!!\n    Node(label='VAR', items=['x'])\n    !!entering walk!!\n    Node(label='VAR', items=['y'])\n    30\n\nstep018:\n    目標：\n        関数定義を行えるようにする(構文木)\n        int func(){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = 20;\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py\n\n    結果\n    ==AST==\n    [Node(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n\n======ここから 実習=====\nstep019:\n    目標：\n        関数定義を行えるようにする(asmコード生成部)\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', \n[Node(label='return', items=[Node(label='NUM', \nitems=['10'])])]]), Node(label='func', items=\n['int', 'main', [Node(label='SENGEN', items=['int', 'x']), \nNode(label='SENGEN', items=['int', 'y']), \nNode(label='DAINYU', items=['x', Node(label='NUM', \nitems=['10'])]), Node(label='DAINYU', items=['y', \nNode(label='NUM', items=['20'])]), Node(label='return', \nitems=[Node(label='+', items=[Node(label='VAR', items=['x']), \nNode(label='VAR', items=['y'])])])]])]\n===codegen step1===\nNode(label='func', items=['int', 'func', [Node(label='return', \nitems=[Node(label='NUM', items=['10'])])]])\ncalcframesize :0\n{}\n===codegen step2===\nfuncname: func\n!!entering walk!!\nNode(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\n!!entering walk!!\nNode(label='return', items=[Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n===codegen step1===\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\ncalcframesize :2\n{'x': 16, 'y': 8}\n===codegen step2===\nfuncname: main\n!!entering walk!!\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])\n!!entering walk!!\nNode(label='NUM', items=['20'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n30\n\n    ポイント\n        いままでは main だけを出力していたけど、tree 全体を forで回すようにする。\n        つまり teigi1 は tree[0] つまり main だけが入ったASTを渡していたが、\n        今回からは tree の各要素を取るようにする。\n        tree[0] は func\n        tree[1] は main になっているので\n        for teigi in tree: \n        とすることで、全ての要素となる。\n\n        そのあと スタックフレーム(ローカル変数の記憶領域)を計算し、\n        また変数名とオフセットの対応表も作る。\n\n        あとは出力\n\n\nstep020:\n    目標：\n        関数呼び出しを行えるようにする(構文木)\n        int func(){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = 20;\n            func();\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py \n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='FUNCCALL', items=['func', []]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n[\n    Node(label='func', \n        items=['int', 'func', \n            [Node(label='return', items=[Node(label='NUM', items=['10'])])]\n        ]),\n    Node(label='func', \n        items=['int', 'main', \n            [Node(label='SENGEN', items=['int', 'x']), \n            Node(label='SENGEN', items=['int', 'y']), \n            Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]),\n            Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]),\n            Node(label='FUNCCALL', items=['func', []]), \n            Node(label='return', items=[\n                                    Node(label='+', items=[Node(label='VAR', items=['x']),\n                                    Node(label='VAR', items=['y'])])]\n            )]\n        ]\n    )\n]\n\n\n    ポイント\n        bun に func(); をパースできるようにして\n        Node(label='FUNCCALL', items=['func', []]) なノードを追加する。\n\n        実は次々ステップで考え方を変える必要があるが、とり������ず、はこれにする。\n        BNFが簡単になるので、まずは呼び出せることを目標とする。\n\n        先取りではあるが itemsの１番目は関数名、2番目は引数リストと先に考えて置き、\n        []空リストを入れておく。これくらいはいいよね…\n\n\nstep021:\n    目標：\n        関数呼び出しを行えるようにする(asmコード生成部)\n        int func(){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = 20;\n            func();\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='FUNCCALL', items=['func', []]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n===codegen step1===\nNode(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\ncalcframesize :0\n{}\n===codegen step2===\nfuncname: func\n!!entering walk!!\nNode(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\n!!entering walk!!\nNode(label='return', items=[Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n===codegen step1===\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='FUNCCALL', items=['func', []]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\ncalcframesize :2\n{'x': 16, 'y': 8}\n===codegen step2===\nfuncname: main\n!!entering walk!!\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])]), Node(label='FUNCCALL', items=['func', []]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])\n!!entering walk!!\nNode(label='NUM', items=['20'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='FUNCCALL', items=['func', []])\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n30\n\n    ポイント\n        Node(label='FUNCCALL', items=['func', []]) なノードは\n\n        call func\n\n        となればよい。\n        引数、関数の戻り値などを本来は考えないといけないのであるがここでは\n        とりあえず、忘れておく。\n\nstep022:\n    目標：\n        関数呼び出しの結果戻り値を変数に入れる(構文木)\n        int func(){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func();\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py \n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', []])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n[\nNode(label='func', \n    items=['int', 'func', [Node(label='return', \n    items=[Node(label='NUM', items=['10'])])]]),\nNode(label='func', \n    items=['int', 'main', [\nNode(label='SENGEN', items=['int', 'x']), \nNode(label='SENGEN', items=['int', 'y']), \nNode(label='DAINYU', \n    items=['x', Node(label='NUM', items=['10'])]), \nNode(label='DAINYU', \n    items=['y', Node(label='FUNCCALL', items=['func', []])]), \nNode(label='return', \n    items=[Node(label='+', \n    items=[Node(label='VAR', items=['x']), \nNode(label='VAR', items=['y'])])])]])]\n\n\n\n\n \n==AST==\n[Node(label='func', \n    items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), \nNode(label='func', \n    items=['int', 'main', \n        [Node(label='SENGEN', items=['int', 'x']), \n        Node(label='SENGEN', items=['int', 'y']), \n        Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), \n        Node(label='EXPRESSION', items=[Node(label='FUNCCALL', items=['func', []])]), \n        Node(label='return', items=[\n            Node(label='+', items=[\n                Node(label='VAR', items=['x']), \n                Node(label='VAR', items=['y'])\n            ])\n        ])\n    ]])\n]\n\n    ポイント\n        bun に func(); をパースできるようにして\n        Node(label='FUNCCALL', items=['func', []]) なノードを追加していた。\n\n        func();\n        の時は良かったが\n        y = func(); の場合は戻り値を考慮しないといけない。\n\n        ここで先ほどの y = 20; について考える。\n        SYMBOL = NUMBER なBNFではなく\n        SYMBOL = expression という、変数名 = 式 という文法定義にしていた。\n\n        y = func(); としているが、例えば y = func() + 10; 等は当然許されてよく、\n        関数呼び出しは式の一要素として見ることができる。\n\n        そこで 式 = SYMBOL ( ) な物を呼び出せるようにしておくことで、なんとかなる。\n\n        ただし、これを入れると、\n        func(); は式単体となる。\n\n        C言語の文法で\n        1+2;\n        はコンパイルはできる。意味はないが。\n        とすると\n        SYMBOL = expression ;\n        だけではなく\n        expression ;\n        単体も許すように変更する。\n\n        これで、\n        func();\n        y = func();\n        1+2;\n        y = 1+2;\n        全て対応できるようになる。\n\n\nstep023:\n    目標：\n        関数呼び出しの結果戻り値を変数に入れる(asmコード生成部)\n        int func(){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func();\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', []])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n===codegen step1===\nNode(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\ncalcframesize :0\n{}\n===codegen step2===\nfuncname: func\n!!entering walk!!\nNode(label='func', items=['int', 'func', [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\n!!entering walk!!\nNode(label='return', items=[Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n===codegen step1===\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', []])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\ncalcframesize :2\n{'x': 16, 'y': 8}\n===codegen step2===\nfuncname: main\n!!entering walk!!\nNode(label='func', items=['int', 'main', [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', []])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', []])])\n!!entering walk!!\nNode(label='FUNCCALL', items=['func', []])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n20\n\n    ポイント\n        関数呼び出しをして関数から戻ってくるときは %rax に戻り値が入ってくる。\n        これを式としてみた場合、call した後に push %rax をすることで式と同一にしている。\n\n\nstep024:\n    目標：\n        ソースコードの不要なコメントを綺麗に\n\nstep025:\n    目標：\n        関数呼び出しの引数をOKにする (構文木)\n        int func( int p ){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func( x );\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py \n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [['int', 'p']], [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n[Node(label='func', \n    items=['int', 'func', [['int', 'p']], \n[Node(label='return', \n    items=[Node(label='NUM', items=['10'])])]]),\n Node(label='func', \n    items=['int', 'main', [], \n[Node(label='SENGEN', \n    items=['int', 'x']), \nNode(label='SENGEN', items=['int', 'y']), \nNode(label='DAINYU', items=['x',\nNode(label='NUM', items=['10'])]), \nNode(label='DAINYU', items=['y', \nNode(label='FUNCCALL', items=['func', \n[Node(label='VAR', items=['x'])]])]), \nNode(label='return', items=[Node(label='+', \n    items=[Node(label='VAR', items=['x']), \nNode(label='VAR', items=['y'])])])]]\n)]\n\n    ポイント\n        関数定義の箇所で引数を可能にする。BNFは愚直に単一にする。\n        しかし、ASTは最初から複数を可能にしておくとよいかも？\n\n        関数呼び出しの箇所に引数を可能にする。ここも愚直で単一に。\n        なお、式とすることで複雑な記述を受理することができる。\n        またASTは複数を可能にしておくとよいかも。\n\n        ASTとして引数を可変長対応しておくことで、最初からwalk部を考慮することができるようになる。\n\n\nstep026:\n    目標：\n        関数呼び出しの引数をOKにする (asmコード生成部)\n        int func( int p ){\n            return 10;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func( x );\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [['int', 'p']], [Node(label='return', items=[Node(label='NUM', items=['10'])])]]), Node(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n===codegen step1===\nNode(label='func', items=['int', 'func', [['int', 'p']], [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\ncalcframesize :1\n{'p': 8}\n===codegen step2===\nfuncname: func\n!!entering walk!!\nNode(label='func', items=['int', 'func', [['int', 'p']], [Node(label='return', items=[Node(label='NUM', items=['10'])])]])\n!!entering walk!!\nNode(label='return', items=[Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n===codegen step1===\nNode(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\ncalcframesize :2\n{'x': 16, 'y': 8}\n===codegen step2===\nfuncname: main\n!!entering walk!!\nNode(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])])\n!!entering walk!!\nNode(label='FUNCCALL', items=['func', [Node(label='VAR', items=['x'])]])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n20\n\n    ポイント\n        関数呼び出しの引数は、レジスタ渡しをする\n        1番目から順にこちらを利用する。'rdi','rsi','rdx','rcx','r8','r9'\n        これらに値をいれてcallする。\n        その為に、呼び出し元の引数は右から評価することとする。\n        例えば func(1,2,3,4); の場合、\n        push $4\n        push $3\n        push $2\n        push $1\n        として、その後\n        pop %rdi\n        pop %rsi\n        pop %rdx\n        pop %rcx\n        とする。\n        今回は引数一つのみでよい。\n\n        関数側では\n        func( int p0 , int p1 , int p2 , int p3 )\n        となっているが、これを暫定的に下記と同じとするようにする。\n        func( int p0 , int p1 , int p2 , int p3 ){\n            int p0;\n            int p1;\n            int p2;\n            int p3;\n            p0 = %rdi;\n            p1 = %rsi;\n            p2 = %rdx;\n            p3 = %rcx;\n        }\n        その為、疑似的にローカル変数が定義されているとするようにコード生成を行う。\n\n        関数引数もローカル変数と同様に fc, fm で管理する\n        ============\n        func(int p0, int p1) {\n            int x;\n            int y;\n        }\n        ============\n        fc: 4\n        fm: { p0: 32, p1: 24, x: 16, y: 8 }\n        ============\n        [stack]\n        |p0 | <-- -32(%rbp)\n        |p1 | <-- -24(%rbp)\n        |x | <-- -16(%rbp)\n        |y | <-- -8(%rbp)\n        |rbp| <-- %rbp\n        ============\n\n\nstep027:\n    目標：\n        関数呼び出しの引数をOKにする \n        int func( int p ){\n            return 10+p;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func( x );\n            return x+y;\n        }\n\n    ポイント\n        実は step026 で対応済み\n\n\n\nstep028:\n    目標：\n        ローカル変数に対応する \n        int func( int p ){\n            int x;\n            int y;\n            x = 10;\n            y = 30;\n            return x+y+p;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            y = func( x );\n            return x+y;\n        }\n\n    ポイント\n        実は step026 で対応済み\n\n\nstep029:\n    目標：\n        if() に 対応する (構文木)\n        int func( int p ){\n            int x;\n            int y;\n            x = 10;\n            y = 30;\n            return x+y+p;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            if ( x == 10){\n                y = 20;\n            }\n            return x+y;\n        }\n    実行方法\n    % python3 compile.py \n\n    実行結果\n\n==AST==\n[Node(label='func', items=['int', 'func', [['int', 'p']], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['30'])]), Node(label='return', items=[Node(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])])]]), Node(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='IF', items=[[Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])], [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n[Node(label='func', \n    items=['int', 'func', [['int', 'p']],\n        [Node(label='SENGEN', items=['int', 'x']), \n        Node(label='SENGEN', items=['int', 'y']), \n        Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), \n        Node(label='DAINYU', items=['y', Node(label='NUM', items=['30'])]), \n        Node(label='return', items=[Node(label='+', items=[Node(label='+', \n                items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), \n                Node(label='VAR', items=['p'])])])]]), \nNode(label='func', \n    items=['int', 'main', [], \n        [Node(label='SENGEN', items=['int', 'x']), \n        Node(label='SENGEN', items=['int', 'y']), \n        Node(label='DAINYU', items=['x', \n        Node(label='NUM', items=['10'])]), \n        Node(label='IF', \n            items=[\n                [Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])],\n                    [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]]), \n        Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n\n    ポイント\n        愚直に if ( 式 == 式 ) {  bunlist } をASTとする。\n        本来だと 式 == 式 を条件式としてくくりたくなるが、分かりやすさ優先でこれにする。\n\nstep030:\n    目標：\n        if() に 対応する (asmコード生成部)\n        int func( int p ){\n            int x;\n            int y;\n            x = 10;\n            y = 30;\n            return x+y+p;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            if ( x == 10){\n                y = 20;\n            }\n            return x+y;\n        }\n\n    実行方法\n    % python3 compile.py  && gcc out.s  && ./a.out ; echo $?\n\n    実行結果\n==AST==\n[Node(label='func', items=['int', 'func', [['int', 'p']], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['30'])]), Node(label='return', items=[Node(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])])]]), Node(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='IF', items=[[Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])], [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])]\n===codegen step1===\nNode(label='func', items=['int', 'func', [['int', 'p']], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['30'])]), Node(label='return', items=[Node(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])])]])\ncalcframesize :3\n{'p': 24, 'x': 16, 'y': 8}\n===codegen step2===\nfuncname: func\n!!entering walk!!\nNode(label='func', items=['int', 'func', [['int', 'p']], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='DAINYU', items=['y', Node(label='NUM', items=['30'])]), Node(label='return', items=[Node(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'p': 24, 'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='NUM', items=['30'])])\n!!entering walk!!\nNode(label='NUM', items=['30'])\n{'p': 24, 'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])]), Node(label='VAR', items=['p'])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n!!entering walk!!\nNode(label='VAR', items=['p'])\n===codegen step1===\nNode(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='IF', items=[[Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])], [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\ncalcframesize :2\n{'x': 16, 'y': 8}\n===codegen step2===\nfuncname: main\n!!entering walk!!\nNode(label='func', items=['int', 'main', [], [Node(label='SENGEN', items=['int', 'x']), Node(label='SENGEN', items=['int', 'y']), Node(label='DAINYU', items=['x', Node(label='NUM', items=['10'])]), Node(label='IF', items=[[Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])], [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]]), Node(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])]])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'x'])\n!!entering walk!!\nNode(label='SENGEN', items=['int', 'y'])\n!!entering walk!!\nNode(label='DAINYU', items=['x', Node(label='NUM', items=['10'])])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='IF', items=[[Node(label='VAR', items=['x']), '==', Node(label='NUM', items=['10'])], [Node(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])]])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='NUM', items=['10'])\n!!entering walk!!\nNode(label='DAINYU', items=['y', Node(label='NUM', items=['20'])])\n!!entering walk!!\nNode(label='NUM', items=['20'])\n{'x': 16, 'y': 8}\n!!entering walk!!\nNode(label='return', items=[Node(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])])\n!!entering walk!!\nNode(label='+', items=[Node(label='VAR', items=['x']), Node(label='VAR', items=['y'])])\n!!entering walk!!\nNode(label='VAR', items=['x'])\n!!entering walk!!\nNode(label='VAR', items=['y'])\n30\n\n\n    ポイント\n        愚直に if ( 式 == 式 ) {  bunlist } をASTとする。\n        左辺式\n        右辺式\n        それぞれを解くとスタックに式の値がpushされる\n        これを２度popしてレジスタに入れ cmp レジスタ,レジスタ で比較する。\n        比較すると、CPUのフラグレジスタの ZF (引き算をして0 すなわち等しい時に1,そうでないときに0)を見て\n        条件分岐をする。\n        JNE は 等しくないとき、 JE は等しいとき、 JMP は無条件ジャンプとなる。\n        ラベル名を指定してジャンプするが、ラベル名をユニークにするために、Label名用のカウンタを用意する。\n        ラベル名のカウンタは IF に入るたびにカウントアップする。\n\nstep031:\nstep032:\n    目標：\n        if() に 対応する (構文木)&(asmコード生成部)\n        int func( int p ){\n            int x;\n            int y;\n            x = 10;\n            y = 30;\n            return x+y+p;\n        }\n        int main(){\n            int x;\n            int y;\n            x = 10;\n            if ( x == 10){\n                y = 20;\n            }else{\n                y = 40;\n            }\n            return x+y;\n        }\n\nstep033:\n\nstep034:\nstep035:\n\n\n\nstepXXX:\n    課題がコンパイルできるようにする。　(step030時点でコンパイルできる)\n\n    int fib( int num ){\n        if (num == 0) {\n            return 0;\n        }\n        if (num == 1) {\n            return 1;\n        }\n        return fib(num - 1) + fib(num - 2);    \n    }\n    int main(){\n        int ret;\n        int ans;\n        r = 1;\n        ans = fib(40);\n        if ( ans == 102334155 ){\n            r = 2;\n        }\n        return r;\n    }\n\n\n","undoManager":{"mark":-2,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":17824.199999999957,"scrollleft":0,"selection":{"start":{"row":1175,"column":7},"end":{"row":1175,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1187,"state":"start","mode":"ace/mode/text"}},"timestamp":1694070594901}