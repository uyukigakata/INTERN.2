{"filter":false,"title":"compile.py","tooltip":"/mydiycc/my019/compile.py","undoManager":{"mark":14,"position":14,"stack":[[{"start":{"row":0,"column":0},"end":{"row":110,"column":29},"action":"insert","lines":["import inspect","import ply.yacc as yacc","from lex import tokens","from codegen import codegen ","from collections import namedtuple","Node = namedtuple('Node',('label','items'))","#+- < *\\","precedence = (","            ('left','OPTASU','OPHIKU'),","            ('left','OPKAKE','OPWARU'),",")","","## p_top(p)","## eBNF の 定義 top の定義","## p_ が prefix として付く。","## 仮引数は 前段からわたってく構造体p[0] と eBNF の定義 p[1]~","def p_top(p):","    '''","    teigi : kansuuteigi","          | teigi kansuuteigi","    '''","    if (len(p) == 2):","        p[0] = [p[1]]","    else:","        tmp = p[1]","        tmp.append(p[2])","        p[0] = tmp","        ","def p_kansuuteigi(p):","    '''","    kansuuteigi : TYPE SYMBOL KAKKO KOKKA LBRACE bunlist RBRACE","    '''","    #p[0] = ['func',p[1],p[2],p[6]]","    p[0] = Node(label='func',items=[p[1],p[2],p[6]])","","def p_bunlist(p):","    '''","    bunlist : bun","            | bunlist bun","    '''","    if (len(p) == 2):","        p[0] = [p[1]]","    else:","        tmp = p[1]","        tmp.append(p[2])","        p[0] = tmp","","def p_bun_return(p):","    '''","    bun : RETURN expression SEMI","    '''","    #p[0] = [p[1],p[2]]","    p[0] = Node(label='return',items=[p[2]])","","def p_bun_sengen(p):","    '''","    bun : TYPE SYMBOL SEMI","    '''","    #p[0] = ['SENGEN',p[1],p[2]]","    p[0] = Node(label='SENGEN',items=[p[1],p[2]])","","def p_bun_dainyu(p):","    '''","    bun : SYMBOL EQUALS expression SEMI","    '''","    p[0] = Node(label='DAINYU', items=[p[1],p[3]])","    ","def p_expression(p):","    '''","    expression : NUMBER","               | expression OPTASU expression","               | expression OPHIKU expression","               | expression OPKAKE expression","               | expression OPWARU expression","    '''","    if(len(p) == 2):","        #p[0] = ['NUM', p[1]]","        p[0] = Node(label='NUM',items=[p[1]])","    else:","        #p[0] = [p[2],p[1],p[3]]","        p[0] = Node(label=p[2],items=[p[1],p[3]])","        ","def p_expression_var(p):","    '''","    expression : SYMBOL","    '''","    p[0] = Node(label = 'VAR', items=[p[1]])","# syntax error","def p_error(p):","    print ('Syntax error %s' % p)","","parser = yacc.yacc()","","#テスト実行","if __name__== '__main__':","    s = '''","    int func(){","        return 10;","    }","    int main(){","        int x;","        int y;","        x=10;","        y=20;","        return x+y;","    }","    '''","    result = parser.parse(s)","    print(\"==AST==\")","    print(result)","    #codegen(result, 'out.s')"],"id":1}],[{"start":{"row":110,"column":4},"end":{"row":110,"column":5},"action":"remove","lines":["#"],"id":2}],[{"start":{"row":102,"column":12},"end":{"row":102,"column":13},"action":"insert","lines":["0"],"id":3}],[{"start":{"row":103,"column":11},"end":{"row":103,"column":12},"action":"remove","lines":["0"],"id":4},{"start":{"row":103,"column":10},"end":{"row":103,"column":11},"action":"remove","lines":["2"]}],[{"start":{"row":103,"column":10},"end":{"row":103,"column":11},"action":"insert","lines":["1"],"id":5},{"start":{"row":103,"column":11},"end":{"row":103,"column":12},"action":"insert","lines":["5"]},{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"insert","lines":["5"]}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"remove","lines":["5"],"id":6}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"insert","lines":["6"],"id":7}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"remove","lines":["6"],"id":8}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"insert","lines":["7"],"id":9}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"remove","lines":["7"],"id":10}],[{"start":{"row":103,"column":12},"end":{"row":103,"column":13},"action":"insert","lines":["5"],"id":11}],[{"start":{"row":102,"column":12},"end":{"row":102,"column":13},"action":"remove","lines":["0"],"id":12}],[{"start":{"row":103,"column":11},"end":{"row":103,"column":12},"action":"remove","lines":["5"],"id":13},{"start":{"row":103,"column":10},"end":{"row":103,"column":11},"action":"remove","lines":["1"]}],[{"start":{"row":103,"column":10},"end":{"row":103,"column":11},"action":"remove","lines":["5"],"id":14}],[{"start":{"row":103,"column":10},"end":{"row":103,"column":11},"action":"insert","lines":["2"],"id":15},{"start":{"row":103,"column":11},"end":{"row":103,"column":12},"action":"insert","lines":["0"]}]]},"ace":{"folds":[],"scrolltop":848.7000000000003,"scrollleft":0,"selection":{"start":{"row":39,"column":7},"end":{"row":39,"column":7},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":55,"state":"qstring3","mode":"ace/mode/python"}},"timestamp":1693976853499,"hash":"7ebb589f27ccd782ea02036920a6ef91f1a46842"}