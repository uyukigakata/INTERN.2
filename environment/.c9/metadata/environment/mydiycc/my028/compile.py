{"filter":false,"title":"compile.py","tooltip":"/mydiycc/my028/compile.py","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":0,"column":0},"end":{"row":145,"column":28},"action":"insert","lines":["import inspect","import ply.yacc as yacc","from lex import tokens","from codegen import codegen ","from collections import namedtuple","Node = namedtuple('Node',('label','items'))","#+- < *\\","precedence = (","            ('left','OPTASU','OPHIKU'),","            ('left','OPKAKE','OPWARU'),",")","","## p_top(p)","## eBNF の 定義 top の定義","## p_ が prefix として付く。","## 仮引数は 前段からわたってく構造体p[0] と eBNF の定義 p[1]~","def p_top(p):","    '''","    teigi : kansuuteigi","          | teigi kansuuteigi","    '''","    ## 定義は RETURN というトークン、 NUMBER というトークン、　SEMI というトークン","    ## これらの並びとする","    if (len(p) == 2):","        p[0] = [p[1]]","    else:","        tmp = p[1]","        tmp.append(p[2])","        p[0] = tmp","        ","def p_kansuuteigi(p):","    '''","    kansuuteigi : TYPE SYMBOL KAKKO KOKKA LBRACE bunlist RBRACE","    '''","    #p[0] = ['func',p[1],p[2],p[6]]","    p[0] = Node(label='func',items=[p[1],p[2],[],p[6]])","","def p_kansuuteigi_hiki(p):","    '''","    kansuuteigi : TYPE SYMBOL KAKKO TYPE SYMBOL KOKKA LBRACE bunlist RBRACE","    '''","    #p[0] = ['func',p[1],p[2],p[6]]","    p[0] = Node(label='func',items=[p[1],p[2],[[p[4],p[5]]],p[8]])","","def p_bunlist(p):","    '''","    bunlist : bun","            | bunlist bun","    '''","    if (len(p) == 2):","        p[0] = [p[1]]","    else:","        tmp = p[1]","        tmp.append(p[2])","        p[0] = tmp","","def p_bun_return(p):","    '''","    bun : RETURN expression SEMI","    '''","    #p[0] = [p[1],p[2]]","    p[0] = Node(label='return',items=[p[2]])","","def p_bun_sengen(p):","    '''","    bun : TYPE SYMBOL SEMI","    '''","    #p[0] = ['SENGEN',p[1],p[2]]","    p[0] = Node(label='SENGEN',items=[p[1],p[2]])","    ","def p_bun_dainyu(p):","    '''","    bun : SYMBOL EQUALS expression SEMI","    '''","    p[0] = Node(label='DAINYU', items=[p[1],p[3]])","","def p_bun_expression_only(p):","    '''","    bun : expression SEMI","    '''","    p[0] = Node(label='EXPRESSION',items=[p[1]])","    ","    ","#def p_bun_funccall(p):","#    '''","#    bun : SYMBOL KAKKO KOKKA SEMI","#    '''","#    p[0] = Node(label='FUNCCALL', items=[p[1], []])","  ","def p_expression(p):","    '''","    expression : NUMBER","               | expression OPTASU expression","               | expression OPHIKU expression","               | expression OPKAKE expression","               | expression OPWARU expression","    '''","    if(len(p) == 2):","        #p[0] = ['NUM', p[1]]","        p[0] = Node(label='NUM',items=[p[1]])","    else:","        #p[0] = [p[2],p[1],p[3]]","        p[0] = Node(label=p[2],items=[p[1],p[3]])","        ","def p_expression_var(p):","    '''","    expression : SYMBOL ","    '''","    p[0] = Node(label = 'VAR', items=[p[1]])","    ","def p_expression_funccall(p):","    '''","    expression : SYMBOL KAKKO KOKKA","    '''","    p[0] = Node(label='FUNCCALL', items=[p[1],[]])","","def p_expression_funcall_hiki(p):","    '''","    expression : SYMBOL KAKKO expression KOKKA","    '''","    p[0] = Node(label='FUNCCALL', items=[p[1],[p[3]]])","","    ","# syntax error","def p_error(p):","    print ('Syntax error %s' % p)","","parser = yacc.yacc()","#テスト実行","if __name__== '__main__':","    s = '''","    int func( int p ){","        return 10;","    }","    int main(){","        int x;","        int y;","        x=10;","        y=func(x);","        return x+y;","    }","    '''","    result = parser.parse(s)","    print(\"==AST==\")","    print(result)","    codegen(result, 'out.s')"],"id":1}],[{"start":{"row":131,"column":4},"end":{"row":140,"column":5},"action":"remove","lines":["int func( int p ){","        return 10;","    }","    int main(){","        int x;","        int y;","        x=10;","        y=func(x);","        return x+y;","    }"],"id":2},{"start":{"row":131,"column":4},"end":{"row":144,"column":9},"action":"insert","lines":["int func( int p ){","            int x;","            int y;","            x = 10;","            y = 30;","            return x+y+p;","        }","        int main(){","            int x;","            int y;","            x = 10;","            y = func( x );","            return x+y;","        }"]}],[{"start":{"row":137,"column":4},"end":{"row":137,"column":8},"action":"remove","lines":["    "],"id":3}],[{"start":{"row":138,"column":4},"end":{"row":138,"column":8},"action":"remove","lines":["    "],"id":4}],[{"start":{"row":139,"column":8},"end":{"row":139,"column":12},"action":"remove","lines":["    "],"id":5}],[{"start":{"row":140,"column":8},"end":{"row":140,"column":12},"action":"remove","lines":["    "],"id":6}],[{"start":{"row":141,"column":8},"end":{"row":141,"column":12},"action":"remove","lines":["    "],"id":7}],[{"start":{"row":142,"column":8},"end":{"row":142,"column":12},"action":"remove","lines":["    "],"id":8}],[{"start":{"row":143,"column":4},"end":{"row":143,"column":8},"action":"remove","lines":["    "],"id":9}],[{"start":{"row":144,"column":0},"end":{"row":144,"column":4},"action":"remove","lines":["    "],"id":10}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":149,"column":28},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":107,"state":"start","mode":"ace/mode/python"}},"timestamp":1694071262054,"hash":"82e8c812de779afdcbe850b1a3b6b73e2634bb6e"}