{"filter":false,"title":"codegen.py","tooltip":"/mydiycc/my021/codegen.py","undoManager":{"mark":35,"position":35,"stack":[[{"start":{"row":0,"column":0},"end":{"row":150,"column":0},"action":"insert","lines":["fm = {}","fc = 0","","def walk( tree , f):","    print(\"!!entering walk!!\")","    print(tree)","    if (tree.label == 'NUM'):","        f.write('   pushq $'+tree.items[0]+ \"\\n\")","    elif (tree.label == 'VAR'):","        f.write(r'   pushq -'+str(fm[tree.items[0]])+r'(%rbp)'+\"\\n\")","    elif (tree.label == '+'):","        walk(tree.items[0],f)","        walk(tree.items[1],f)","        f.write(r'   pop %rdi' + \"\\n\")","        f.write(r'   pop %rax' + \"\\n\")","        f.write(r'   add %rdi,%rax' + \"\\n\")","        f.write(r'   pushq %rax' + \"\\n\")","    elif (tree.label == '-'):","        walk(tree.items[0],f)","        walk(tree.items[1],f)","        f.write(r'   pop %rdi' + \"\\n\")","        f.write(r'   pop %rax' + \"\\n\")","        f.write(r'   sub %rdi,%rax' + \"\\n\")","        f.write(r'   pushq %rax' + \"\\n\")","    elif (tree.label == '*'):","        walk(tree.items[0],f)","        walk(tree.items[1],f)","        f.write(r'   pop %rdi' + \"\\n\")","        f.write(r'   pop %rax' + \"\\n\")","        f.write(r'   imul %rdi,%rax' + \"\\n\")","        f.write(r'   pushq %rax' + \"\\n\")","    elif (tree.label == '/'):","        walk(tree.items[0],f)","        walk(tree.items[1],f)","        f.write(r'   pop %rdi' + \"\\n\")","        f.write(r'   pop %rax' + \"\\n\")","        f.write(r'   sub %rdi,%rax' + \"\\n\")","        f.write(r'   pushq %rax' + \"\\n\")","    elif (tree.label == 'DAINYU'):","        walk(tree.items[1],f)","        print(fm)","        f.write(r'   pop\t%rax'+ \"\\n\")","        f.write(r'   mov\t%rax, -'+str(fm[tree.items[0]])+r'(%rbp)'+\"\\n\")","    elif (tree.label == 'func'):","        returntype = tree.items[0]  # 戻り値の型","        funcname   = tree.items[1]  # 関数名","        f.write(r'   .globl\t'+ funcname + \"\\n\")","        f.write(r'   .type\t'+ funcname + ', @function' + \"\\n\")","        f.write(funcname + \":\\n\")","        f.write(r'   endbr64' + \"\\n\")","        f.write(r'   pushq %rbp' + \"\\n\")","        f.write(r'   movq %rsp, %rbp' + \"\\n\")","        # ローカル変数のサイズ分スタックをずらす","        f.write(r'   subq $'+str(fc*8)+r',%rsp'+\"\\n\")    # sizeof(int)を 8 とする。アライメント調整が面倒なので","        for item in tree.items[2]:","            walk(item,f)","        f.write(r'   .size '+funcname+', .-'+ funcname +\"\\n\")","    #elif (tree.label == 'SENGEN'):","        # sengen","    elif (tree.label == 'return'):","        walk(tree.items[0],f)","        f.write(r'   pop\t%rax'+ \"\\n\")","        f.write(r'   leave'+ \"\\n\")","        f.write(r'   ret'+ \"\\n\")","    ","","def calcframesize( tree ):","    '''","        sizeof(int)の数","    '''","    return len(list( filter( lambda item: item.label == 'SENGEN' , tree ) ))","def createframemap( tree ):","    map = {}","    vars = list( filter( lambda item: item.label == 'SENGEN' , tree ) )","    size = len(vars) * 8","    for sen in vars:","        map[sen.items[1]] = size","        size -= 8","    return map","","def codegen( tree , filename ):","    with open(filename, mode='w') as f:","","        ## １個目は関数の定義とする","        #teigi1 = tree[0]","","        ##asmの先頭","        f.write(r'  .text' + \"\\n\")","        ","        for teigi in tree:","            print('===codegen step1===')","            print(teigi)","            rettype  = teigi.items[0]    #戻り値の型 int","            funcname = teigi.items[1]    #関数名 main","    ","            global fc","            global fm","            fc = calcframesize( teigi.items[2] )   # sizeof(int)の数","            fm = createframemap( teigi.items[2] ) ","    ","            print( 'calcframesize :' + str(fc) )","            print( fm )","            ","            ","            # returnexp = list( filter( lambda item: item.label != 'SENGEN' , teigi1.items[2] ) )","            # print(returnexp)","            # dainyu_list = []","            # dainyu_list.append(returnexp[0])","            # dainyu_list.append(returnexp[1])","            # exp = returnexp[2].items[0]","            # exp      = teigi1[3][2][1] #文","            # print(\"exp:\")","            # print(exp)","            # print(\"dainyu_list:\")","            # print(dainyu_list)","            ","            ","    ","            print('===codegen step2===')","            print('funcname: '+funcname)","    ","            ","            walk(teigi,f)","            ","            #関数ヘッダ","            # f.write(r'   .globl\t'+ funcname + \"\\n\")","            # f.write(r'   .type\t'+ funcname + ', @function' + \"\\n\")","            # f.write(funcname + \":\\n\")","            # f.write(r'   endbr64' + \"\\n\")","            # f.write(r'   pushq %rbp' + \"\\n\")","            # f.write(r'   movq %rsp, %rbp' + \"\\n\")","            # # ローカル変数のサイズ分スタックをずらす","            # f.write(r'   subq $'+str(fc*8)+r',%rsp'+\"\\n\")    # sizeof(int)を 8 とする。アライメント調整が面倒なので","    ","            #代入のコードを生成する","            # for d in dainyu_list:","            #     walk(d.items[1],f)","            #     f.write(r'   pop\t%rax'+ \"\\n\")","            #     f.write(r'   mov\t%rax, -'+str(fm[d.items[0]])+r'(%rbp)'+\"\\n\")","    ","            #式を歩く","            # walk(exp,f)","            # f.write(r'   pop\t%rax'+ \"\\n\")","    ","            #関数フッダ","            # #f.write(r'   popq\t%rbp'+ \"\\n\")    #ローカル変数分スタックをずらしたので Leave で対処","            # f.write(r'   leave'+ \"\\n\")","            # f.write(r'   ret'+ \"\\n\")","            # f.write(r'   .size '+funcname+', .-'+ funcname +\"\\n\")","    ",""],"id":1}],[{"start":{"row":63,"column":32},"end":{"row":64,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":64,"column":0},"end":{"row":64,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":64,"column":4},"end":{"row":64,"column":8},"action":"remove","lines":["    "],"id":3}],[{"start":{"row":64,"column":4},"end":{"row":64,"column":5},"action":"insert","lines":["e"],"id":4},{"start":{"row":64,"column":5},"end":{"row":64,"column":6},"action":"insert","lines":["l"]},{"start":{"row":64,"column":6},"end":{"row":64,"column":7},"action":"insert","lines":["i"]},{"start":{"row":64,"column":7},"end":{"row":64,"column":8},"action":"insert","lines":["f"]}],[{"start":{"row":64,"column":8},"end":{"row":64,"column":9},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":64,"column":4},"end":{"row":64,"column":9},"action":"remove","lines":["elif "],"id":6}],[{"start":{"row":64,"column":4},"end":{"row":68,"column":32},"action":"insert","lines":["elif (tree.label == 'return'):","        walk(tree.items[0],f)","        f.write(r'   pop\t%rax'+ \"\\n\")","        f.write(r'   leave'+ \"\\n\")","        f.write(r'   ret'+ \"\\n\")"],"id":7}],[{"start":{"row":65,"column":8},"end":{"row":65,"column":29},"action":"remove","lines":["walk(tree.items[0],f)"],"id":8},{"start":{"row":65,"column":4},"end":{"row":65,"column":8},"action":"remove","lines":["    "]},{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"remove","lines":["    "]},{"start":{"row":64,"column":34},"end":{"row":65,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":64,"column":25},"end":{"row":64,"column":31},"action":"remove","lines":["return"],"id":9},{"start":{"row":64,"column":25},"end":{"row":64,"column":26},"action":"insert","lines":["F"]},{"start":{"row":64,"column":26},"end":{"row":64,"column":27},"action":"insert","lines":["U"]},{"start":{"row":64,"column":27},"end":{"row":64,"column":28},"action":"insert","lines":["N"]}],[{"start":{"row":64,"column":28},"end":{"row":64,"column":29},"action":"insert","lines":["C"],"id":10},{"start":{"row":64,"column":29},"end":{"row":64,"column":30},"action":"insert","lines":["C"]},{"start":{"row":64,"column":30},"end":{"row":64,"column":31},"action":"insert","lines":["A"]}],[{"start":{"row":64,"column":31},"end":{"row":64,"column":32},"action":"insert","lines":["L"],"id":11},{"start":{"row":64,"column":32},"end":{"row":64,"column":33},"action":"insert","lines":["L"]}],[{"start":{"row":67,"column":6},"end":{"row":67,"column":32},"action":"remove","lines":["  f.write(r'   ret'+ \"\\n\")"],"id":12},{"start":{"row":67,"column":5},"end":{"row":67,"column":6},"action":"remove","lines":[" "]}],[{"start":{"row":67,"column":4},"end":{"row":67,"column":5},"action":"remove","lines":[" "],"id":13},{"start":{"row":67,"column":0},"end":{"row":67,"column":4},"action":"remove","lines":["    "]},{"start":{"row":66,"column":34},"end":{"row":67,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":65,"column":21},"end":{"row":65,"column":24},"action":"remove","lines":["pop"],"id":14},{"start":{"row":65,"column":21},"end":{"row":65,"column":22},"action":"insert","lines":["c"]},{"start":{"row":65,"column":22},"end":{"row":65,"column":23},"action":"insert","lines":["a"]}],[{"start":{"row":65,"column":23},"end":{"row":65,"column":24},"action":"insert","lines":["l"],"id":15},{"start":{"row":65,"column":24},"end":{"row":65,"column":25},"action":"insert","lines":["l"]}],[{"start":{"row":65,"column":26},"end":{"row":65,"column":30},"action":"remove","lines":["%rax"],"id":16}],[{"start":{"row":65,"column":28},"end":{"row":65,"column":29},"action":"insert","lines":["t"],"id":17},{"start":{"row":65,"column":29},"end":{"row":65,"column":30},"action":"insert","lines":["r"]},{"start":{"row":65,"column":30},"end":{"row":65,"column":31},"action":"insert","lines":["e"]},{"start":{"row":65,"column":31},"end":{"row":65,"column":32},"action":"insert","lines":["e"]}],[{"start":{"row":65,"column":32},"end":{"row":65,"column":33},"action":"insert","lines":["."],"id":18},{"start":{"row":65,"column":33},"end":{"row":65,"column":34},"action":"insert","lines":["i"]},{"start":{"row":65,"column":34},"end":{"row":65,"column":35},"action":"insert","lines":["y"]},{"start":{"row":65,"column":35},"end":{"row":65,"column":36},"action":"insert","lines":["e"]},{"start":{"row":65,"column":36},"end":{"row":65,"column":37},"action":"insert","lines":["m"]}],[{"start":{"row":65,"column":37},"end":{"row":65,"column":38},"action":"insert","lines":["s"],"id":19}],[{"start":{"row":65,"column":34},"end":{"row":65,"column":35},"action":"remove","lines":["y"],"id":20}],[{"start":{"row":65,"column":34},"end":{"row":65,"column":35},"action":"insert","lines":["t"],"id":21}],[{"start":{"row":65,"column":38},"end":{"row":65,"column":40},"action":"insert","lines":["[]"],"id":22}],[{"start":{"row":65,"column":39},"end":{"row":65,"column":40},"action":"insert","lines":["0"],"id":23}],[{"start":{"row":65,"column":41},"end":{"row":65,"column":42},"action":"insert","lines":[" "],"id":24},{"start":{"row":65,"column":42},"end":{"row":65,"column":43},"action":"insert","lines":["+"]}],[{"start":{"row":65,"column":43},"end":{"row":65,"column":44},"action":"insert","lines":[" "],"id":25}],[{"start":{"row":66,"column":26},"end":{"row":66,"column":27},"action":"insert","lines":["p"],"id":26},{"start":{"row":66,"column":27},"end":{"row":66,"column":28},"action":"insert","lines":["u"]},{"start":{"row":66,"column":28},"end":{"row":66,"column":29},"action":"insert","lines":["s"]},{"start":{"row":66,"column":29},"end":{"row":66,"column":30},"action":"insert","lines":["h"]}],[{"start":{"row":66,"column":25},"end":{"row":66,"column":26},"action":"remove","lines":["e"],"id":27},{"start":{"row":66,"column":24},"end":{"row":66,"column":25},"action":"remove","lines":["v"]},{"start":{"row":66,"column":23},"end":{"row":66,"column":24},"action":"remove","lines":["a"]},{"start":{"row":66,"column":22},"end":{"row":66,"column":23},"action":"remove","lines":["e"]},{"start":{"row":66,"column":21},"end":{"row":66,"column":22},"action":"remove","lines":["l"]}],[{"start":{"row":66,"column":26},"end":{"row":66,"column":27},"action":"insert","lines":[" "],"id":28}],[{"start":{"row":66,"column":27},"end":{"row":66,"column":28},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":66,"column":28},"end":{"row":66,"column":29},"action":"insert","lines":["%"],"id":30}],[{"start":{"row":66,"column":29},"end":{"row":66,"column":30},"action":"insert","lines":["r"],"id":31},{"start":{"row":66,"column":30},"end":{"row":66,"column":31},"action":"insert","lines":["a"]},{"start":{"row":66,"column":31},"end":{"row":66,"column":32},"action":"insert","lines":["x"]}],[{"start":{"row":66,"column":32},"end":{"row":66,"column":33},"action":"insert","lines":["'"],"id":32}],[{"start":{"row":66,"column":25},"end":{"row":66,"column":26},"action":"remove","lines":["'"],"id":33}],[{"start":{"row":66,"column":25},"end":{"row":66,"column":26},"action":"insert","lines":["b"],"id":34}],[{"start":{"row":66,"column":25},"end":{"row":66,"column":26},"action":"remove","lines":["b"],"id":35}],[{"start":{"row":66,"column":25},"end":{"row":66,"column":26},"action":"insert","lines":[" "],"id":36}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":153,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1693985139103,"hash":"2b969875775cdfd76d6bfb86097df3ceab8544ac"}