{"filter":false,"title":"compile.py","tooltip":"/mydiycc/my012/compile.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["import inspect","import ply.yacc as yacc","from lex import tokens","from codegen import codegen ","from collections import namedtuple","Node = namedtuple('Node',('label','items'))","","#+- < *\\","precedence = (","            ('left','OPTASU','OPHIKU'),","            ('left','OPKAKE'),",")","","#定義","def p_top(p):","    '''","    teigi : kansuuteigi","    '''","    ","    p[0] = [p[1]]","","def p_kansuuteigi(p):","    '''","    kansuuteigi : TYPE SYMBOL KAKKO KOKKA LBRACE bunlist RBRACE","    '''","    #p[0] = ['func',p[1],p[2],p[6]]","    p[0] = Node(label='func',items=[p[1],p[2],p[6]])","","def p_bunlist(p):","    '''","    bunlist : bun","            | bunlist bun","    '''","    if (len(p) == 2):","        p[0] = [p[1]]","    else:","        tmp = p[1]","        tmp.append(p[2])","        p[0] = tmp","","def p_bun_return(p):","    '''","    bun : RETURN expression SEMI","    '''","    #p[0] = [p[1],p[2]]","    p[0] = Node(label='return',items=[p[2]])","","def p_bun_sengen(p):","    '''","    bun : TYPE SYMBOL SEMI","    '''","    #p[0] = ['SENGEN',p[1],p[2]]","    p[0] = Node(label='SENGEN',items=[p[1],p[2]])","","def p_expression(p):","    '''","    expression : NUMBER","               | expression OPTASU expression","               | expression OPHIKU expression","               | expression OPKAKE expression","    '''","    ","    if(len(p) == 2):","        #p[0] = ['NUM', p[1]]","        p[0] = Node(label='NUM',items=[p[1]])","    else:","        #p[0] = [p[2],p[1],p[3]]","        p[0] = Node(label=p[2],items=[p[1],p[3]])","","# syntax error","def p_error(p):","    print ('Syntax error %s' % p)","","parser = yacc.yacc()","","#テスト実行","if __name__== '__main__':","    s = '''","    int main(){","        int x;","        int y;","        return 3+2*3;","    }","    '''","    result = parser.parse(s)","    print(\"==AST==\")","    print(result)","    codegen(result, 'out.s')",""],"id":1}]]},"ace":{"folds":[],"scrolltop":1014,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":66,"state":"start","mode":"ace/mode/python"}},"timestamp":1693924336268,"hash":"825c1e28a19d2e9050287213088a73f0dbf95772"}